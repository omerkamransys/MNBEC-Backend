DROP PROCEDURE IF EXISTS [ApplicationClaimActivate];
GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================
CREATE PROCEDURE ApplicationClaimActivate(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PClaimId	int 
	)
AS
BEGIN
SET NOCOUNT ON;
	UPDATE applicationclaim 
		SET 
			ModifiedById = @PCurrentUserId,
			ModifiedDate = GETUTCDATE(),
			Active = @PActive
	WHERE ClaimId = @PClaimId;
End;

GO


DROP PROCEDURE if exists [ApplicationClaimAdd];
GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================
CREATE PROCEDURE ApplicationClaimAdd
(
 @PCurrentUserId int,
 @PClaimId	int OUTPUT,
 @PClaimCode varchar(10),
 @PClaimType	varchar(256),
 @PClaimLabel	varchar(100),
 @PClaimGroupId	varchar(10),
 @PActive	bit
 )
As
Begin
	SET NOCOUNT ON;
	Insert Into applicationclaim
				(ClaimType,  ClaimLabel,ClaimGroupId,ClaimCode,  CreatedById,  CreatedDate,  Active)
		Values	(@PClaimType, @PClaimLabel,@PClaimGroupId,@PClaimCode, @PCurrentUserId, GETUTCDATE(), @PActive);

	Set @PClaimId = SCOPE_IDENTITY();
End;
GO


DROP procedure if exists [ApplicationClaimGet];
GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGet(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PClaimId	int 
	)
As
Begin
Set nocount on;
	Select 
		tbl.ClaimId, 
		tbl.ClaimType, 
		tbl.ClaimLabel, 
		tbl.ClaimLabelTranslation,
		tbl.ClaimCode,
		tbl.CreatedById, tbl.CreatedDate, tbl.ModifiedById, tbl.ModifiedDate, tbl.Active
	From applicationclaim tbl
	Where tbl.Active = @PActive
	And tbl.ClaimId = @PClaimId;

End;

GO

DROP procedure if exists [ApplicationUserAdd];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE  PROCEDURE ApplicationUserAdd(	
 @PUserId	int OUT,
 @PCurrentUserId int,
 @PUserName	varchar(256),
 @PFirstName	varchar(60),
 @PLastName	varchar(60),
 @PIdentificationNumber varchar(20),
 @PEmail	varchar(256),
 @PEmailConfirmed	bit,
 @PPasswordHash	varchar(max),
 @PSecurityStamp	varchar(max),
 @PConcurrencyStamp	varchar(max),
 @PPhoneNumber	varchar(max),
 @PAddress1	varchar(max),
 @PAddress2	varchar(max),
 @PCityId	int,
 @PStateId	int,
 @PPhoneNumberConfirmed	bit,
 @PTwoFactorEnabled	bit,
 @PLockoutEnabled	bit,
 @PAccessFailedCount	int,
 @PActive	bit
	)
As
Begin
Set nocount on;

IF @PStateId = 0 BEGIN 
	   set @PStateId = null;
	END 
IF @PCityId = 0 BEGIN 
   set @PCityId = null;
END 

	Insert Into applicationuser
				(UserName,  FirstName,  LastName, IdentificationNumber,  Email, Address1,Address2,CityId,StateId, EmailConfirmed,  PasswordHash,  SecurityStamp,  ConcurrencyStamp,  PhoneNumber,  PhoneNumberConfirmed,  TwoFactorEnabled,  LockoutEnabled,  AccessFailedCount,  CreatedById,  CreatedDate,  Active)
		Values	(@PUserName, @PFirstName, @PLastName, @PIdentificationNumber, @PEmail, @PAddress1,@PAddress2,@PCityId,@PStateId,@PEmailConfirmed, @PPasswordHash, @PSecurityStamp, @PConcurrencyStamp, @PPhoneNumber, @PPhoneNumberConfirmed, @PTwoFactorEnabled, @PLockoutEnabled, @PAccessFailedCount, @PCurrentUserId, GETUTCDATE(), 1);

	Set @PUserId = SCOPE_IDENTITY();
End;

GO

DROP procedure if exists [ApplicationClaimGetList];

GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE PROCEDURE ApplicationClaimGetList(	
 @PCurrentUserId int 
	)
As
Begin
Set nocount on;
	-- SQLINES LICENSE FOR EVALUATION USE ONLY
	Select 
		tbl.ClaimId, tbl.ClaimType, tbl.ClaimCode
	From applicationclaim  tbl
	Where tbl.Active = 1;

End;

GO



DROP procedure if exists [ApplicationUserGetbyName];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================
-- SQLINES LICENSE FOR EVALUATION USE ONLY
CREATE PROCEDURE ApplicationUserGetbyName(
 @PUserName	varchar(256)
	)
As
Begin
Set nocount on;
	Select 
		tbl.UserId, tbl.UserName, tbl.FirstName, tbl.LastName, tbl.Email, tbl.EmailConfirmed, tbl.PasswordHash, tbl.SecurityStamp, tbl.ConcurrencyStamp, tbl.PhoneNumber, tbl.PhoneNumberConfirmed, tbl.TwoFactorEnabled, tbl.LockoutEnd, tbl.LockoutEnabled, tbl.AccessFailedCount, tbl.CreatedById, tbl.CreatedDate, tbl.ModifiedById, tbl.ModifiedDate, tbl.Active
	From applicationuser tbl
	Where tbl.UserName = @PUserName AND tbl.Active =1;

End;

GO

DROP procedure if exists [ApplicationClaimGetAllClaimsWithRole];

GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGetAllClaimsWithRole(	
 @PCurrentUserId int 
	-- SQLINES DEMO *** signed,
 -- SQLINES DEMO *** rchar(60)
	)
As
Begin
Set nocount on;

    Select 
	tbl.RoleId,
	tbl.RoleName,
	tbl.RoleNameCode,
	tbl.Active
	From applicationrole tbl 
	where Active = 1;

	Select 
		tbl.RoleId,
		tbl.ClaimId,
		ac.ClaimCode
		From applicationroleclaim  tbl
        inner join applicationclaim ac on ac.ClaimId = tbl.ClaimId
        inner join applicationrole ar on  ar.RoleId = tbl.RoleId
		Where tbl.Active = 1  and ar.Active = 1 ; 
    

End;

GO


DROP procedure if exists [ApplicationClaimGetListByRole];

GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGetListByRole(	
 @PCurrentUserId int,
 @PRoleId int,
    @PRoleCode varchar(60)
	)
As
Begin
Set nocount on;
	Select 
		tbl.ClaimId, tbl.ClaimType, tbl.ClaimCode,tbl.ClaimLabel,tbl.ClaimLabelTranslation        
	From applicationclaim  tbl
    
		Inner Join applicationroleclaim rctbl On tbl.ClaimId = rctbl.ClaimId  And rctbl.Active = 1        
		Inner Join applicationrole rtbl On rctbl.RoleId = rtbl.RoleId And rtbl.Active = 1 
        
	Where tbl.Active = 1  And ( rctbl.RoleId=@PRoleId OR rtbl.RoleNameCode = @PRoleCode);

End;

GO


DROP procedure if exists [ApplicationClaimGetListByUser];

GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGetListByUser(	
 @PCurrentUserId int 
	)
As
Begin
Set nocount on;
	
	Select Distinct
		tbl.ClaimId, tbl.ClaimType, tbl.ClaimCode, 
        tbl.ClaimLabel, tbl.ClaimGroupId,tbl.ClaimLabelTranslation
	From applicationclaim  tbl
		Inner Join applicationroleclaim rctbl On tbl.ClaimId = rctbl.ClaimId  And rctbl.Active = 1 
		Inner Join applicationrole rtbl On rctbl.RoleId = rtbl.RoleId And rtbl.Active = 1  
		Inner Join applicationuserrole urtbl On rtbl.RoleId = urtbl.RoleId And urtbl.Active = 1 And urtbl.UserId = @PCurrentUserId
	Where tbl.Active = 1;

End;

GO




DROP procedure if exists [ApplicationClaimGroupAdd];
GO


-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGroupAdd(	
 @PCurrentUserId int,
 @PClaimGroupId	int OUT,
 @PClaimGroupLabel	varchar(100),
 @PClaimGroupCode	varchar(10),
 @PActive	bit
	)
As
Begin
Set nocount on;
	Insert Into applicationclaimgroup
				(ClaimGroupId,  ClaimGroupLabel,  ClaimGroupCode,  CreatedById,  CreatedDate,  Active)
		Values	(@PClaimGroupId, @PClaimGroupLabel, @PClaimGroupCode, @PCurrentUserId, GETUTCDATE(), @PActive);

End;

GO




DROP procedure if exists [ApplicationClaimGroupGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGroupGet(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit
	)
As
Begin
Set nocount on;
	Select 
		tbl.ClaimGroupId, tbl.ClaimGroupLabel,
		tbl.ClaimGroupLabelTranslation,
		tbl.ClaimGroupCode, tbl.CreatedById, tbl.CreatedDate, tbl.ModifiedById, tbl.ModifiedDate, tbl.Active
	From applicationclaimgroup tbl
	Where tbl.Active = @PActive;

End;

GO


DROP procedure if exists [ApplicationClaimGroupGetList];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE  PROCEDURE ApplicationClaimGroupGetList(	
 @PCurrentUserId int 
	)
As
Begin
Set nocount on;

    Select 
        tbl.ClaimGroupId, tbl.ClaimGroupCode, tbl.ClaimGroupLabel,tbl.ClaimGroupLabelTranslation
	From applicationclaimGroup tbl
	Where tbl.Active = 1
    Order By tbl.ClaimGroupLabel Asc;

End;

GO

DROP procedure if exists [ApplicationClaimGroupUpdate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGroupUpdate(	
 @PCurrentUserId int,
 @PClaimGroupId	int,
 @PClaimGroupLabel	varchar(100),
 @PClaimGroupCode	varchar(10),
 @PActive	bit
	)
As
Begin
Set nocount on;
	Update applicationclaimgroup 
		Set 
			ClaimGroupId=@PClaimGroupId,
			ClaimGroupLabel=@PClaimGroupLabel,
			ClaimGroupCode=@PClaimGroupCode,
			ModifiedById=@PCurrentUserId,
			ModifiedDate= GETUTCDATE(),
			Active=@PActive;

End;

GO




DROP procedure if exists [ApplicationClaimUpdate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimUpdate(	
 @PCurrentUserId int,
 @PClaimId	int,
 @PClaimType	varchar(256),
 @PClaimLabel	varchar(100),
 @PClaimGroupLabel	varchar(10),
 @PActive	bit
	)
As
Begin
Set nocount on;
	Update applicationclaim 
		Set 
			ClaimType=@PClaimType,
			ClaimLabel=@PClaimLabel,
			ModifiedById=@PCurrentUserId,
			ModifiedDate= GETUTCDATE(),
			Active=@PActive
	Where ClaimId=@PClaimId;
End;

GO



DROP procedure if exists [ApplicationRoleActivate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationRoleActivate(	
 @PCurrentUserId int,
	--IN PReasonCodeId int unsigned,
 @PActive bit,
 @PRoleId	int 
	)
As
Begin
Set nocount on;
	Update applicationrole 
		Set 
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where RoleId=@PRoleId;
End;

GO




DROP procedure if exists [ApplicationRoleAdd];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationRoleAdd(
 @PCurrentUserId int,
 @PRoleId	int OUT,
 @PRoleName	varchar(60),
    @PRoleCode	varchar(10),
    @PRoleNameTranslation	varchar(60),
 @PActive	bit
	)
As
Begin
Set nocount on;
	Insert Into applicationrole
				(RoleName, RoleNameTranslation,RoleNameCode, CreatedById,    CreatedDate,     Active)
		Values	(@PRoleName,@PRoleNameTranslation,@PRoleCode,  @PCurrentUserId, GETUTCDATE(), @PActive);

	Set @PRoleId= SCOPE_IDENTITY();
End;

GO




DROP procedure if exists [ApplicationRoleClaimLogAdd];

GO
-- =============================================
-- Author:		Omer Kamran Butt
-- Create date: January, 01, 2019
-- Description:	ApplicationRoleClaimLog Add
-- =============================================

CREATE  PROCEDURE ApplicationRoleClaimLogAdd(	
 @PCurrentUserId int,
 @PRoleId	int,
 @PClaimId	int 
	)
As
Begin
Set nocount on;

			INSERT INTO applicationroleclaimLog
						(RoleClaimId,RoleId,ClaimType,ClaimValue,ClaimId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
				SELECT	RoleClaimId,RoleId,ClaimType,ClaimValue,ClaimId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
				FROM	applicationroleclaim
				WHERE	ClaimId=@PClaimId 
				And		RoleId = @PRoleId;
             

End;

GO



DROP procedure if exists [ApplicationClaimGroupActivate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGroupActivate(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit
	)
As
Begin
Set nocount on;
	Update applicationclaimgroup
		Set 
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive;

End;

GO




DROP procedure if exists [ApplicationRoleClaimUpdate];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE  PROCEDURE ApplicationRoleClaimUpdate(	
 @PCurrentUserId int,
 @PRoleId	int,
 @PClaimId	int,
 @PClaimType	varchar(256),
 @PActive	bit
	)
As
Begin
Set nocount on;

	If Exists (Select * From applicationroleclaim tbl Where ClaimId=@PClaimId And RoleId = @PRoleId) Begin
		EXEC ApplicationRoleClaimLogAdd @PCurrentUserId ,@PRoleId ,@PClaimId;
		
		Update applicationroleclaim 
			Set 
				ClaimType=@PClaimType,
				ModifiedById=@PCurrentUserId,
				ModifiedDate=GETUTCDATE(),
				Active=@PActive
		Where ClaimId=@PClaimId 
		And RoleId = @PRoleId;
    End
    Else Begin
		INSERT INTO applicationroleclaim
					(RoleId,  ClaimType,  ClaimId,  CreatedById,    CreatedDate,     Active)
			 VALUES (@PRoleId, @PClaimType, @PClaimId, @PCurrentUserId, GETUTCDATE(), @PActive);
             
	End 
End;

GO



DROP procedure if exists [ApplicationRoleGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationRoleGet(	
 @PRoleId	int 
	)
As
Begin
Set nocount on;
	
	Select 
		tbl.RoleId, tbl.RoleName,tbl.RoleNameCode,
        tbl.RoleNameTranslation,
        tbl.RoleDescription, tbl.CreatedById, tbl.CreatedDate, tbl.ModifiedById, tbl.ModifiedDate, tbl.Active
	From applicationrole tbl
	Where tbl.RoleId=@PRoleId;
    
    
    Select Distinct 
        cgtbl.ClaimGroupId, cgtbl.ClaimGroupCode, cgtbl.ClaimGroupLabel ,cgtbl.ClaimGroupLabelTranslation
	From applicationclaimGroup cgtbl
	Where cgtbl.Active = 1
    Order By cgtbl.ClaimGroupLabel asc;
    
	
	Select Distinct
		ctbl.ClaimId, ctbl.ClaimType, ctbl.ClaimCode, ctbl.ClaimLabel, ctbl.ClaimLabelTranslation, ctbl.ClaimGroupId,
        rctbl.Active --rtbl.RoleId is Not Null And  Active
	From applicationclaim ctbl
		Left Outer Join applicationroleclaim rctbl On ctbl.ClaimId = rctbl.ClaimId And rctbl.RoleId = @PRoleId And rctbl.Active = 1 
		Left Outer Join applicationrole rtbl On rctbl.RoleId = rtbl.RoleId --And rtbl.Active = 1
	Where ctbl.Active = 1 
    Order By ctbl.ClaimGroupId, ctbl.ClaimLabel; 	 

End;

GO




DROP procedure if exists [ApplicationRoleGetbyName];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationRoleGetbyName(	
 @PRoleName varchar(60)
	)
As
Begin
Set nocount on;
	
	Select 
		tbl.RoleId, tbl.RoleName,tbl.RoleNameTranslation, tbl.RoleDescription, tbl.CreatedById, tbl.CreatedDate, tbl.ModifiedById, tbl.ModifiedDate, tbl.Active
	From applicationrole tbl
	Where tbl.RoleName = @PRoleName;
	 

End;

GO



DROP procedure if exists [ApplicationRoleLogAdd];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationRoleLogAdd(
 @PCurrentUserId int,
 @PRoleId	int 
	)
As
Begin
Set nocount on;
	INSERT INTO applicationrolelog
				(RoleId,RoleName,RoleNameTranslation,RoleNameCode,NormalizedNameRoleName,RoleDescription,
				CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
	SELECT		RoleId,RoleName,RoleNameTranslation,RoleNameCode,NormalizedNameRoleName,RoleDescription,
				CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
	FROM		applicationrole
	WHERE		RoleId=	@PRoleId;

End;
GO




DROP procedure if exists [ApplicationRoleUpdate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationRoleUpdate(	
 @PCurrentUserId int,
 @PRoleId	int,
 @PRoleName	varchar(60),
 @PRoleCode	varchar(10),
 @PRoleNameTranslation	varchar(60),
 @PActive	bit
	)
As
Begin
Set nocount on;
	EXEC ApplicationRoleLogAdd @PCurrentUserId,@PRoleId;
	Update applicationrole 
		Set 
			RoleName=@PRoleName,
			RoleNameCode=@PRoleCode,
            RoleNameTranslation=@PRoleNameTranslation,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where RoleId=@PRoleId;
End;
GO




DROP procedure if exists [ApplicationUserLogAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	Application User Log Add
-- =============================================


CREATE  PROCEDURE ApplicationUserLogAdd(	
 @PUserId	int OUT,
 @PCurrentUserId int 
	)
As
Begin
Set nocount on;


	Insert	into	applicationuserlog
					(UserId,UserName,NormalizedUserName,FirstName,LastName,IdentificationNumber,Address1,Address2,CityId,StateId,PostalCode,
					Email,NormalizedEmail,EmailConfirmed,PasswordHash,SecurityStamp,ConcurrencyStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
					LockoutEnd,LockoutEnabled,AccessFailedCount,LoginDate,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
			SELECT	UserId,UserName,NormalizedUserName,FirstName,LastName,IdentificationNumber,Address1,Address2,CityId,StateId,PostalCode,
					Email,NormalizedEmail,EmailConfirmed,PasswordHash,SecurityStamp,ConcurrencyStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
					LockoutEnd,LockoutEnabled,AccessFailedCount,LoginDate,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
			FROM	applicationuser
			WHERE	UserId=@PUserId;

	
End;
GO




DROP procedure if exists [ApplicationUserActivate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserActivate(	
 @PCurrentUserId int,
	--IN PReasonCodeId int unsigned,
 @PActive bit,
 @PUserId	int 
	)
As
Begin
Set nocount on;
	EXEC ApplicationUserLogAdd @PUserId,@PCurrentUserId; 
	Update applicationuser 
		Set 
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where UserId=@PUserId;
End;
GO




DROP procedure if exists [ApplicationRoleGetList];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE  PROCEDURE ApplicationRoleGetList(
 @PCurrentUserId int)
as
begin
set nocount on;

	
	select 
		RoleId,
		RoleName,
		NormalizedNameRoleName,
        RoleDescription,
        RoleNameTranslation,
		RoleNameCode
	from applicationrole tbl
	where Active = 1
	order by RoleName asc;

End;
GO


DROP procedure if exists [ApplicationRoleIdGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationRoleIdGet(	
 @PRoleName varchar(60)
	)
As
Begin
Set nocount on;
	Select 
		RoleId,
        RoleName,
        RoleNameTranslation
	From applicationrole tbl
	Where RoleName = @PRoleName OR
    	RoleNameTranslation = @PRoleName;

End;
GO





DROP procedure if exists [ApplicationUserGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationUserGet(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PUserId	int 
	)
As
Begin
Set nocount on;
	Select 
		UserId, UserName, FirstName, LastName, Email, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, LockoutEnabled, AccessFailedCount, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationuser tbl
	Where Active = @PActive
	And UserId=@PUserId;

End;
GO




DROP procedure if exists [ApplicationUserGetbyEmail];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationUserGetbyEmail(	
 @PUserEmail	varchar(256)
	)
As
Begin
Set nocount on;
	Select 
		UserId, UserName,'' as 'DealershipName' , FirstName, LastName, Email, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, LockoutEnabled, AccessFailedCount, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationuser tbl
	Where Email=@PUserEmail AND Active =1;
End;
GO




DROP procedure if exists [ApplicationUserGetByRole];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserGetByRole gets the users by Role Id
-- =============================================


CREATE  PROCEDURE ApplicationUserGetByRole(
 @PRoleId int)
as
begin
set nocount on;

	
	select 
	au.UserId,
	au.UserName,
	au.FirstName,
	au.LastName,
	au.Email,
	au.PhoneNumber,
	au.Active,
	au.IdentificationNumber
	from applicationuser au
	inner join applicationuserrole aur on aur.UserId = au.UserId and aur.Active = 1
	inner join applicationrole ar on ar.RoleId = aur.RoleId and ar.RoleId = @PRoleId
	where au.active = 1 ;

End;
GO





DROP procedure if exists [ApplicationUserGetDealerbyEmail];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserGetDealerbyEmail(	
 @PUserEmail	varchar(256)
	)
As
Begin
Set nocount on;
	
	Select 
		UserId, UserName, FirstName, LastName, Email, EmailConfirmed, PasswordHash, SecurityStamp, ConcurrencyStamp, PhoneNumber, PhoneNumberConfirmed, TwoFactorEnabled, LockoutEnd, LockoutEnabled, AccessFailedCount, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationuser tbl
	Where Email = @PUserEmail AND Active =1;
End;
GO



DROP procedure if exists [ApplicationUserRoleActivate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationUserRoleActivate(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PUserRoleId	int 
	)
As
Begin
Set nocount on;
	Update applicationuserrole 
		Set 
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where UserRoleId=@PUserRoleId;
End;
GO




DROP procedure if exists [ApplicationUserRoleAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserRoleAdd(	
 @PCurrentUserId int,
 @PUserRoleId	int OUT,
 @PUserId	int,
 @PRoleId	int 
	)
As
Begin
Set nocount on;
	Insert Into applicationuserrole
				(UserId,  RoleId,  CreatedById,  CreatedDate)
		Values	(@PUserId, @PRoleId, @PCurrentUserId, GETUTCDATE());

	Set @PUserRoleId=SCOPE_IDENTITY();
End;
GO




DROP procedure if exists [ApplicationUserRoleGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserRoleGet(	
 @PRoleId	int,
    @PUserId	int 
	)
As
Begin
Set nocount on;
	
	Select 
		UserRoleId, UserId, RoleId, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationuserrole
	Where UserId = @PUserId 
	And RoleId = @PRoleId;

End;
GO




DROP procedure if exists [ApplicationUserRoleGetByUser];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserRoleGetByUser gets the Roles by User
-- =============================================


CREATE  PROCEDURE ApplicationUserRoleGetByUser(
 @PCurrentUserId int)
as
begin
set nocount on;

	SELECT Distinct ar.RoleName
	FROM applicationuserrole tbl
	Inner Join applicationrole ar on tbl.RoleId = ar.RoleId
	where UserId = @PCurrentUserId;

End;
GO





DROP procedure if exists [ApplicationUserRoleLogAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	Application User Role Log
-- =============================================


CREATE PROCEDURE ApplicationUserRoleLogAdd(	
 @PCurrentUserId int,
 @PUserRoleId	int 
	)
As
Begin
Set nocount on;
	Insert	Into	applicationuserroleLog
					(UserRoleId,UserId,RoleId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
			SELECT	UserRoleId,UserId,RoleId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
			FROM	applicationuserrole
			WHERE	UserRoleId=@PUserRoleId ;

	
End;
GO






DROP procedure IF EXISTS [ApplicationUserRolesInactive];

GO

CREATE PROCEDURE ApplicationUserRolesInactive(	
 @PCurrentUserId int,	
 @PUserId	int 	
	)
As
Begin
Set nocount on;

	Update applicationuserrole 
		Set    			
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active = 0
	Where UserId=@PUserId;
End;
GO





DROP procedure if exists [ApplicationUserRoleUpdate];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserRoleUpdate(	
 @PCurrentUserId int,
 @PUserRoleId	int,
 @PUserId	int,
 @PRoleId	int,
 @PActive	bit
	)
As
Begin
Set nocount on;
	Exec ApplicationUserRoleLogAdd @PCurrentUserId,@PUserRoleId; 
	Update applicationuserrole 
		Set 
			UserId=@PUserId,
			RoleId=@PRoleId,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where UserRoleId=@PUserRoleId;
End;
GO




DROP procedure if exists [ApplicationUserSearch];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserSearch(
    @PSearchText varchar(50))
as
begin
set nocount on;

select tblmak.FirstName,
	'' LastName,
    '' Email
	from applicationuser tblmak
	where tblmak.FirstName LIKE concat('%',@PSearchText,'%')
   UNION
   select tblmak.FirstName,
	tblmak.LastName,
    '' Email
	from applicationuser tblmak
	where tblmak.LastName LIKE concat('%',@PSearchText,'%')
    UNION
   select tblmak.FirstName,
	tblmak.LastName,
    tblmak.Email
	from applicationuser tblmak
	where tblmak.Email LIKE concat('%',@PSearchText,'%');
End;
GO




DROP procedure if exists [ApplicationUserUpdate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationUserUpdate(	
 @PCurrentUserId int,
 @PUserId	int,
 @PUserName	varchar(256),
 @PFirstName	varchar(60),
 @PLastName	varchar(60),
 @PEmail	varchar(256),
 @PEmailConfirmed	bit,
 @PIdentificationNumber varchar(20),
 @PSecurityStamp	varchar(max),
 @PConcurrencyStamp	varchar(max),
 @PPhoneNumber	varchar(max),
 @PPhoneNumberConfirmed	bit,
 @PTwoFactorEnabled	bit,
 @PLockoutEnabled	bit,
 @PAccessFailedCount	int,
 @PActive	bit
	)
As
Begin
Set nocount on;
	EXEC ApplicationUserLogAdd @PUserId,@PCurrentUserId; 
	Update applicationuser 
		Set 
			UserName=@PUserName,
			FirstName=@PFirstName,
			LastName=@PLastName,
			Email=@PEmail,
			EmailConfirmed=@PEmailConfirmed,
			IdentificationNumber = @PIdentificationNumber,
			SecurityStamp=@PSecurityStamp,
			ConcurrencyStamp=@PConcurrencyStamp,
			PhoneNumber=@PPhoneNumber,
			PhoneNumberConfirmed=@PPhoneNumberConfirmed,
			TwoFactorEnabled=@PTwoFactorEnabled,
			LockoutEnabled=@PLockoutEnabled,
			AccessFailedCount=@PAccessFailedCount,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where UserId=@PUserId;
End;
GO





DROP procedure if exists [GetAdmins];

GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	GetAdmins gets all the admin users from applicationuser table
-- =============================================

Create Procedure GetAdmins
As
Begin
Set nocount on;

select 
au.UserId,
au.UserName,
au.Email
from applicationuser au
inner join applicationuserrole aur on aur.UserId = au.UserID and aur.Active =1 
inner join applicationrole ar on ar.RoleId = aur.RoleId and ar.RoleId =1 
Where ar.RoleName = 'ADMIN' and ar.active = 1;

End;
Go


DROP procedure if exists [GetAllManager];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE GetAllManager(
 @PCurrentUserId int 
	)
as
begin
set nocount on;
   
   select DISTINCT au.UserId, au.UserName,au.FirstName,au.LastName from applicationuserrole aur 
inner join applicationuser au on au.UserId=aur.UserId
inner join applicationrole ar on ar.roleid=aur.roleid
where ar.RoleNameCode='PURCM'
	order by au.UserId asc;
End;
GO





Drop Procedure If Exists [GetApplicationUserById];
GO
-- =============================================
-- Author:      
-- Create date: 
-- Description: Get Data By GetApplicationUserById from ApplicationUser table 
-- =============================================

Create PROCEDURE GetApplicationUserById
( @PUserId	int 
	)
As
Begin
Set nocount on;
	
	Select 
		UserId, UserName, FirstName, LastName,
        IdentificationNumber,Address1,Address2,
        CityId,StateId,PostalCode,
        Email,EmailConfirmed,
        PasswordHash,SecurityStamp,
        ConcurrencyStamp,PhoneNumber,
        PhoneNumberConfirmed,TwoFactorEnabled,
        LockoutEnd,LockoutEnabled,AccessFailedCount,
        Active,CreatedById,CreatedDate,
        ModifiedById,ModifiedDate
	From applicationuser tbl
	Where  UserId=@PUserId;
End;
Go




DROP procedure if exists [GetPasswordHash];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE GetPasswordHash(	
 @PUserId	int 
	
	)
As
Begin
Set nocount on;
	
	select PasswordHash from applicationuser tbl where
		 
			UserId = @PUserId;
			

End;
GO


DROP procedure if exists [GetUserById];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE GetUserById(
 @PUserId int 
	)
as
begin
set nocount on;

	
	select 
		UserId,
		FirstName,
        LastName,
        Email,
		IdentificationNumber,
        tbl.Active,
        e.UserTypeId,
        PhoneNumber,
		ut.UserTypeName
	
	from applicationuser tbl
   left join employee e on  e.EmployeeId = UserId
   left join usertype ut on ut.UserTypeId = e.UserTypeId
	where UserId = @PUserId;


select 

		aur.RoleId,
        ar.RoleName,
        ar.RoleNameCode,
        ar.RoleNameTranslation
        from applicationuserrole aur
    left join applicationrole ar on ar.RoleId = aur.RoleId
    where aur.UserId = @PUserId AND aur.Active = 1;
    
End;
GO



DROP procedure if exists [UserTypeActivate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE  PROCEDURE UserTypeActivate(
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PUserTypeId int 
 )
As
Begin
Set nocount on;
 Update usertype 
  Set 
   ModifiedById=@PCurrentUserId,
   ModifiedDate=GETUTCDATE(),
   Active=@PActive
 Where UserTypeId=@PUserTypeId;
 
End;
GO




DROP procedure if exists [UserTypeAdd];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE UserTypeAdd( 
 @PCurrentUserId int,
 @PUserTypeId int OUT,
 @PUserTypeCode varchar(10),
 @PUserTypeName varchar(60),
 @PUserTypeNameTranslation varchar(60),
 @PActive bit
 )
As
Begin
Set nocount on;
 Insert Into usertype
    (UserTypeCode,  UserTypeName,  UserTypeNameTranslation,  CreatedById,  CreatedDate,  Active)
  Values (@PUserTypeCode, @PUserTypeName, @PUserTypeNameTranslation, @PCurrentUserId, GETUTCDATE(), @PActive);

 Set @PUserTypeId=SCOPE_IDENTITY();
 
End;
GO




DROP procedure if exists [UserTypeGet];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE  PROCEDURE UserTypeGet( 
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PUserTypeId int 
 )
As
Begin
Set nocount on;
 
 Select 
  UserTypeId, UserTypeCode, UserTypeName, UserTypeNameTranslation, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
 From usertype
 Where Active = @PActive
 And UserTypeId=@PUserTypeId;

End;
GO



DROP procedure if exists [UserTypeGetbyEmail];

GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE UserTypeGetbyEmail(	
 @PUserEmail	varchar(256)
	)
As
Begin
Set nocount on;

	
    
    
    Select top 1 UserId , ut.UserTypeCode, ut.UserTypeName from applicationuser tbl
	left join employee emp on UserId = emp.EmployeeId
	left join UserType ut on emp.UserTypeid = ut.UserTypeid
	where UserName = @PUserEmail and tbl.Active = 1 ;
    
    
End;
GO



DROP procedure if exists [UserTypeGetList];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE UserTypeGetList(
 @PCurrentUserId int)
as
begin
set nocount on;

	
	select 
		UserTypeId,
		UserTypeCode,
		UserTypeName,
        UserTypeNameTranslation
	from usertype tbl
	where Active = 1
	order by UserTypeName asc;

End;
GO



DROP procedure if exists [UserTypeUpdate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE UserTypeUpdate( 
	 @PCurrentUserId int,
	 @PUserTypeId int,
	 @PUserTypeCode varchar(10),
	 @PUserTypeName varchar(60),
	 @PUserTypeNameTranslation varchar(60),
	 @PActive bit
 )
As
Begin
Set nocount on;
 Update usertype 
  Set 
   UserTypeCode=@PUserTypeCode,
   UserTypeName=@PUserTypeName,
   UserTypeNameTranslation=@PUserTypeNameTranslation,
   ModifiedById=@PCurrentUserId,
   ModifiedDate=GETUTCDATE(),
   Active=@PActive
 Where UserTypeId=@PUserTypeId;
 
End;
GO



DROP procedure if exists [EmployeeAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE EmployeeAdd(	
 @PCurrentUserId int,
 @PEmployeeId	int,
 @PUserTypeId	int,
 @PActive	bit
	)
As
Begin
Set nocount on;
	Insert Into employee
				(EmployeeId,  UserTypeId,  CreatedById,  CreatedDate,  Active)
		Values	(@PEmployeeId, @PUserTypeId, @PCurrentUserId, GETUTCDATE(), @PActive);

End;
GO


DROP procedure if exists [EmployeeLogAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE EmployeeLogAdd(	
 @PCurrentUserId int,
 @PEmployeeId	int 
	)
As
Begin
Set nocount on;
	INSERT	INTO employeelog
				(EmployeeId,UserTypeId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
			SELECT EmployeeId,UserTypeId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
			FROM employee where EmployeeId=@PEmployeeId ;

End;
GO




DROP procedure if exists [EmployeeActivate];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE EmployeeActivate(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit
	)
As
Begin
Set nocount on;
	EXEC EmployeeLogAdd @PCurrentUserId,PEmployeeId;
	Update employee
		Set 
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive;

End;
GO




DROP procedure if exists [ApplicationRoleClaimLogAdd];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationRoleClaimLog Add
-- =============================================


CREATE  PROCEDURE ApplicationRoleClaimLogAdd(	
 @PCurrentUserId int,
 @PRoleId	int,
 @PClaimId	int 
	)
As
Begin
Set nocount on;

			INSERT INTO applicationroleclaimLog
						(RoleClaimId,RoleId,ClaimType,ClaimValue,ClaimId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
				SELECT	RoleClaimId,RoleId,ClaimType,ClaimValue,ClaimId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
				FROM	applicationroleclaim
				WHERE	ClaimId=@PClaimId 
				And		RoleId = @PRoleId;
             

End;
GO





DROP procedure if exists [ApplicationRoleLogAdd];
GO

-- =============================================
-- Author:	
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationRoleLogAdd(
 @PCurrentUserId int,
 @PRoleId	int 
	)
As
Begin
Set nocount on;
	INSERT INTO applicationrolelog
				(RoleId,RoleName,RoleNameTranslation,RoleNameCode,NormalizedNameRoleName,RoleDescription,
				CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
	SELECT		RoleId,RoleName,RoleNameTranslation,RoleNameCode,NormalizedNameRoleName,RoleDescription,
				CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
	FROM		applicationrole
	WHERE		RoleId=	@PRoleId;

End;
GO





DROP procedure if exists [ApplicationUserLogAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	Application User Log Add
-- =============================================


CREATE  PROCEDURE ApplicationUserLogAdd(	
 @PUserId	int OUT,
 @PCurrentUserId int 
	)
As
Begin
Set nocount on;


	Insert	into	applicationuserlog
					(UserId,UserName,NormalizedUserName,FirstName,LastName,IdentificationNumber,Address1,Address2,CityId,StateId,PostalCode,
					Email,NormalizedEmail,EmailConfirmed,PasswordHash,SecurityStamp,ConcurrencyStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
					LockoutEnd,LockoutEnabled,AccessFailedCount,LoginDate,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
			SELECT	UserId,UserName,NormalizedUserName,FirstName,LastName,IdentificationNumber,Address1,Address2,CityId,StateId,PostalCode,
					Email,NormalizedEmail,EmailConfirmed,PasswordHash,SecurityStamp,ConcurrencyStamp,PhoneNumber,PhoneNumberConfirmed,TwoFactorEnabled,
					LockoutEnd,LockoutEnabled,AccessFailedCount,LoginDate,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
			FROM	applicationuser
			WHERE	UserId=@PUserId;

	
End;
GO



DROP procedure if exists [ApplicationUserRoleLogAdd];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	Application User Role Log
-- =============================================


CREATE PROCEDURE ApplicationUserRoleLogAdd(	
 @PCurrentUserId int,
 @PUserRoleId	int 
	)
As
Begin
Set nocount on;
	Insert	Into	applicationuserroleLog
					(UserRoleId,UserId,RoleId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,AuditDate,AuditCreatedById)
			SELECT	UserRoleId,UserId,RoleId,CreatedById,CreatedDate,ModifiedById,ModifiedDate,Active,GETUTCDATE(),@PCurrentUserId
			FROM	applicationuserrole
			WHERE	UserRoleId=@PUserRoleId ;

	
End;
GO


DROP procedure if exists [SetPasswordHash];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE SetPasswordHash(	
 @PPasswordHash varchar(max),
 @PUserId	int 
	
	)
As
Begin
Set nocount on;
EXEC ApplicationUserLogAdd @PUserId,@PUserId; 
	Update applicationuser 
		Set 
			PasswordHash=@PPasswordHash,
            ModifiedDate=GETUTCDATE()
			
	Where UserId=@PUserId;
End;
GO




Drop Procedure If Exists ApplicationUserNotificationActivate;

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserNotificationActivate deletes record from ApplicationUserNotification
-- =============================================

Create Procedure ApplicationUserNotificationActivate(
 @PCurrentUserId int,
 @PActive bit,
 @PApplicationUserNotificationId	int)
As
Begin
Set nocount on;
	Update ApplicationUserNotification 
		Set 
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive
	Where ApplicationUserNotificationId=@PApplicationUserNotificationId;
End;
Go






DROP procedure if exists [ApplicationUserGetInspectorbyEmail];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserGetInspectorbyEmail(	
 @PUserEmail	varchar(256)
	)
As
Begin
Set nocount on;
	-- SQLINES LICENSE FOR EVALUATION USE ONLY
	Select 
		UserId, 
        UserName,
        '' as DealershipName, 
        FirstName, 
        LastName, 
        Email, 
        EmailConfirmed, 
        PasswordHash, 
        SecurityStamp, 
        ConcurrencyStamp, 
        PhoneNumber, 
        PhoneNumberConfirmed, 
        TwoFactorEnabled, 
        LockoutEnd, 
        LockoutEnabled, 
        AccessFailedCount, 
        tbl.CreatedById, 
        tbl.CreatedDate, 
        tbl.ModifiedById, 
        tbl.ModifiedDate, 
        tbl.Active
	From applicationuser tbl
	inner join employee e on e.employeeId = UserId AND e.UserTypeId = 2  --Inspector
    
	Where Email=@PUserEmail 
    AND tbl.Active =1;
    
End;
GO




Drop Procedure If Exists [ApplicationUserNotificationAdd];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserNotificationAdd adds new record in ApplicationUserNotification
-- =============================================


Create Procedure ApplicationUserNotificationAdd(	
    @PCurrentUserId int,
 @PApplicationUserNotificationId	int OUT,
 @PUserId	int,
 @PNotificationId	int,
	
 @PNotificationMessage	varchar(256),
 @PNotificationMessageTranslation	varchar(256)
	)
As
Begin
Set nocount on;
		Insert Into ApplicationUserNotification
					(UserId,  
					NotificationId,
					
					NotificationMessage,
					NotificationMessageTranslation, 
					Sent,
					Viewed,
					CreatedById,
					CreatedDate,
					Active)
	           Values	
					(@PUserId,
					@PNotificationId,
					
					@PNotificationMessage,
					@PNotificationMessageTranslation, 
					0,
					0,
					@PCurrentUserId,
					GETUTCDATE(),
					1);

	     Set @PApplicationUserNotificationId=SCOPE_IDENTITY();

End;
Go




Drop Procedure If Exists [ApplicationUserNotificationGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserNotificationGet gets related record from ApplicationUserNotification
-- =============================================

Create Procedure ApplicationUserNotificationGet(	
    @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit,
 @PApplicationUserNotificationId	int)
As
Begin
Set nocount on;
	
	Select 
		ApplicationUserNotificationId,
		UserId, 
		NotificationId,
		NotificationMessage,
		NotificationMessageTranslation,
		Sent,
		Viewed,
		CreatedById,
		CreatedDate,
		ModifiedById,
		ModifiedDate,
		Active
	From ApplicationUserNotification tbl
	Where Active = @PActive And ApplicationUserNotificationId=@PApplicationUserNotificationId;
End;
Go



Drop Procedure If Exists [ApplicationUserNotificationUpdate];
GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserNotificationUpdate updates record in ApplicationUserNotification
-- =============================================

Create Procedure ApplicationUserNotificationUpdate
( @PCurrentUserId int,
 @PApplicationUserNotificationId	int,
 @PSent	bit,
 @PViewed	bit
	)
As
Begin
Set nocount on;
	Update ApplicationUserNotification 
		Set 
			Sent=@PSent,
			Viewed=@PViewed,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE()
	Where ApplicationUserNotificationId=@PApplicationUserNotificationId;

End;
Go



Drop Procedure If Exists [ApplicationUserNotificationUpdateViewStatus];
GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserNotificationUpdateViewStatus updates record in ApplicationUserNotification
-- =============================================

Create Procedure ApplicationUserNotificationUpdateViewStatus
( @PCurrentUserId int,
 @PApplicationUserNotificationId	int,
 @PViewedAll	bit
	)
As
Begin
Set nocount on;

if(@PViewedAll = 1) BEGIN
		Update ApplicationUserNotification 
			Set
				Viewed = 1,
				ModifiedById = @PCurrentUserId,
				ModifiedDate = GETUTCDATE()
		Where   UserId = @PCurrentUserId and ApplicationUserNotificationId > 0;
    
END
ELSE BEGIN
    	Update ApplicationUserNotification 
		Set
			Viewed=1,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE()
	Where  ApplicationUserNotificationId=@PApplicationUserNotificationId;
END 

End;
Go




Drop Procedure If Exists [ApplicationUserNotificationUpdateViewStatus];
GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	ApplicationUserNotificationUpdateViewStatus updates record in ApplicationUserNotification
-- =============================================

Create Procedure ApplicationUserNotificationUpdateViewStatus
( @PCurrentUserId int,
 @PApplicationUserNotificationId	int,
 @PViewedAll	bit
	)
As
Begin
Set nocount on;

if(@PViewedAll = 1) BEGIN
		Update ApplicationUserNotification 
			Set
				Viewed = 1,
				ModifiedById = @PCurrentUserId,
				ModifiedDate = GETUTCDATE()
		Where   UserId = @PCurrentUserId and ApplicationUserNotificationId > 0;
    
END
ELSE BEGIN
    	Update ApplicationUserNotification 
		Set
			Viewed=1,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE()
	Where  ApplicationUserNotificationId=@PApplicationUserNotificationId;
END 

End;
Go



DROP procedure if exists [EmployeeGet];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE  PROCEDURE EmployeeGet(	
 @PCurrentUserId int,
 @PReasonCodeId int,
 @PActive bit
	)
As
Begin
Set nocount on;
	
	Select 
		EmployeeId, UserTypeId, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From employee
	Where Active = @PActive;

End;
GO



DROP procedure if exists [EmployeeUpdate];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE EmployeeUpdate(	
 @PCurrentUserId int,
 @PEmployeeId	int,
 @PUserTypeId	int,
 @PActive	bit
	)
As
Begin
Set nocount on;
	EXEC EmployeeLogAdd @PCurrentUserId,@PEmployeeId;
	Update employee 
		Set 
			EmployeeId=@PEmployeeId,
			UserTypeId=@PUserTypeId,
			ModifiedById=@PCurrentUserId,
			ModifiedDate=GETUTCDATE(),
			Active=@PActive;

End;
GO






DROP procedure if exists [ApplicationUserRoleCheck];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================
CREATE PROCEDURE ApplicationUserRoleCheck(
 @PRoleName varchar(60),
 @PUserId int,
    @PTotalRecord int out)
as
begin
set nocount on;

     -- SQLINES LICENSE FOR EVALUATION USE ONLY
    select  * from applicationuserrole where UserId = @PUserId and RoleId in (select 
		RoleId
	from applicationrole tbl
	where RoleName = @PRoleName and Active = 1);
    set @PTotalRecord = (Select COUNT(*) from applicationuserrole where UserId = @PUserId and RoleId in (select 
		RoleId
	from applicationrole tbl
	where RoleName = @PRoleName and Active = 1));
End;
GO



DROP procedure if exists [ApplicationRoleGetAll];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationRoleGetAll(	
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
	Select 
		RoleId, RoleName,RoleNameTranslation,
        RoleDescription, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationrole tbl
	ORDER BY                    
     case when @PSortColumn = 'RoleId' and @PSortAscending = 1 then RoleId end,
	 case when @PSortColumn = 'RoleId' and @PSortAscending = 0 then RoleId end desc,
	 case when @PSortColumn = 'RoleName' and @PSortAscending = 1 then RoleName end asc,
	 case when @PSortColumn = 'RoleName' and @PSortAscending = 0 then RoleName end desc
	offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(RoleId) from applicationrole) ;

End;


DROP procedure if exists [ApplicationClaimGetAll];

Go
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE  PROCEDURE ApplicationClaimGetAll(	
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
    
	
	Select 
		ClaimId, ClaimType, ClaimLabel,ClaimLabelTranslation, ClaimCode, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationclaim  tbl with (nolock)
	Where Active = 1	
	order by 
		case when @PSortColumn = 'ClaimId' and @PSortAscending = 1 then ClaimId end asc,
		case when @PSortColumn = 'ClaimId' and @PSortAscending = 0 then ClaimId end desc
	offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(ClaimId) from applicationclaim) ;

End;



DROP procedure if exists [ApplicationClaimGroupGetAllByRole];

Go
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationClaimGroupGetAllByRole(	
 @PCurrentUserId int,
 @PRoleId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
    
    Select distinct 
        ClaimGroupId, ClaimGroupCode, ClaimGroupLabel
	From applicationclaimGroup cgtbl
	Where Active = 1
    order by ClaimGroupLabel asc;
        
	set @PTotalRecord = @@ROWCOUNT;
    
	
	Select distinct
		ctbl.ClaimId, ctbl.ClaimType, ctbl.ClaimCode, ctbl.ClaimLabel, ctbl.ClaimGroupId,
        rtbl.RoleId , ctbl.Active
	From applicationclaim ctbl
		Left Outer Join applicationroleclaim rctbl On ctbl.ClaimId = rctbl.ClaimId  And rctbl.Active = 1 And rctbl.RoleId = @PRoleId
		Left Outer Join applicationrole rtbl On rctbl.RoleId = rtbl.RoleId And rtbl.Active = 1
	Where ctbl.Active = 1 
    order by ctbl.ClaimGroupId, ctbl.ClaimLabel; 

End;
GO




DROP procedure IF EXISTS [ApplicationRoleClaimsGetAll];
Go

CREATE  PROCEDURE ApplicationRoleClaimsGetAll(
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
)
AS
BEGIN
SET NOCOUNT ON;

Select 
		RoleId, RoleName, RoleDescription, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationrole tbl;

select Distinct  
        cgtbl.ClaimGroupId,  cgtbl.ClaimGroupCode,  cgtbl.ClaimGroupLabel
	From applicationclaimGroup cgtbl
	Where  cgtbl.Active = 1
    Order By  cgtbl.ClaimGroupLabel asc;
    
	
	Select Distinct
		ctbl.ClaimId, ctbl.ClaimType, ctbl.ClaimCode, ctbl.ClaimLabel, ctbl.ClaimGroupId,
        rctbl.Active 
	From applicationclaim ctbl
		Left Outer Join applicationroleclaim rctbl On ctbl.ClaimId = rctbl.ClaimId

		Left Outer Join applicationrole rtbl On rctbl.RoleId = rtbl.RoleId 
	Where ctbl.Active = 1 
    Order By ctbl.ClaimGroupId, ctbl.ClaimLabel; 	 
End;
GO



DROP procedure if exists [ApplicationUserGetAll];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationUserGetAll(	
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
    @PRoleId int,
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
	
	Select 
		tbl.UserId,
		tbl.FirstName, 
        tbl.LastName, 
        tbl.Email,
        ut.UserTypeName,
		ut.UserTypeId,
        ar.RoleName,
		ar.RoleId,
        tbl.Active
        
        
	From applicationuser tbl 
    Left join applicationuserrole aur on  tbl.UserId = aur.UserId
    Left join applicationrole ar on aur.RoleId = ar.RoleId
    Left join employee em on tbl.UserId = em.EmployeeId
	Left join usertype ut on em.UserTypeId = ut.UserTypeId
    where aur.RoleId = @PRoleId
	order by 
		case when @PSortColumn = 'UserId' and @PSortAscending = 1 then tbl.UserId end asc,
		case when @PSortColumn = 'UserId' and @PSortAscending = 0 then tbl.UserId end desc
	offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(tbl.UserId) from applicationuser tbl Left join applicationuserrole aur on  tbl.UserId = aur.UserId where aur.RoleId = @PRoleId) ;

End;



Drop Procedure If Exists [ApplicationUserNotificationGetAllByUserId];

Go
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

Create Procedure ApplicationUserNotificationGetAllByUserId(
    @PUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int OUT)
As
Begin
Set nocount on;

	
	Select 
		ApplicationUserNotificationId,
		UserId, 
		NotificationId,
        NotificationMessage,
		NotificationMessageTranslation,
		Sent,
		Viewed
	From ApplicationUserNotification tbl
	Where Viewed = 0
    And UserId = @PUserId
    Order by 
		case when @PSortColumn = 'CreatedDate' and @PSortAscending = 1 then CreatedDate end asc,
		case when @PSortColumn = 'CreatedDate' and @PSortAscending = 0 then CreatedDate end desc
		offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(UserId) from ApplicationUserNotification Where Viewed = 0 And UserId = @PUserId) ;

End;





DROP procedure if exists [ApplicationUserRoleGetAll];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE ApplicationUserRoleGetAll(	
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
	
	Select 
		UserRoleId, UserId, RoleId, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From applicationuserrole
	Where Active = 1	order by 
		case when @PSortColumn = 'UserRoleId' and @PSortAscending = 1 then UserRoleId end asc,
		case when @PSortColumn = 'UserRoleId' and @PSortAscending = 0 then UserRoleId end desc
		offset @POffset rows
		fetch next @PPageSize rows only;
		set @PTotalRecord =  (Select COUNT(UserRoleId) from applicationuserrole Where Active = 1) ;

End;





DROP procedure if exists [UserTypeGetAll];

Go
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================


CREATE PROCEDURE UserTypeGetAll( 
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
 )
As
Begin
Set nocount on;
 
 Select 
  UserTypeId, UserTypeCode, UserTypeName, UserTypeNameTranslation, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
 From usertype
 Where Active = 1 order by 
  case when @PSortColumn = 'UserTypeId' and @PSortAscending = 1 then UserTypeId end asc,
  case when @PSortColumn = 'UserTypeId' and @PSortAscending = 0 then UserTypeId end desc
  offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(UserTypeId) from usertype Where Active = 1) ;

End;




DROP procedure if exists [EmployeeGetAll];

GO
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE EmployeeGetAll(	
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
	
	Select 
		EmployeeId, UserTypeId, CreatedById, CreatedDate, ModifiedById, ModifiedDate, Active
	From employee
	Where Active = 1	order by 
		case when @PSortColumn = 'EmployeeId' and @PSortAscending = 1 then EmployeeId end asc,
		case when @PSortColumn = 'EmployeeId' and @PSortAscending = 0 then EmployeeId end desc
	offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(EmployeeId) from employee Where Active = 1) ;

End;




Drop Procedure If Exists [ApplicationUserNotificationGetAll];

go
-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

Create Procedure ApplicationUserNotificationGetAll(
    @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending binary,
 @PTotalRecord int OUT)
As
Begin
Set nocount on;

	Select 
		ApplicationUserNotificationId,
		UserId, 
		NotificationId,
        NotificationMessage,
		NotificationMessageTranslation,
		Sent,
		Viewed,
        CreatedDate,
        (select Count(ApplicationUserNotificationId) from ApplicationUserNotification au where au.Viewed = 0 AND au.UserId = @PCurrentUserId ) AS UnReadCount
	From ApplicationUserNotification tbl
	Where Active = 1	
    And UserId = @PCurrentUserId
    Order by 
    CreatedDate desc
	offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select COUNT(UserId) from ApplicationUserNotification Where Active = 1	
    And UserId = @PCurrentUserId);
    

End;
Go



DROP procedure if exists [ApplicationUserGetAllByUserType];
GO

-- =============================================
-- Author:		
-- Create date: 
-- Description:	
-- =============================================

CREATE PROCEDURE ApplicationUserGetAllByUserType(	
 @PCurrentUserId int,
 @POffset int,
 @PPageSize int,
 @PSortColumn varchar(60),
 @PSortAscending bit,
    @PUserTypeId int,
    @PActive bit,
    @PRoleId	int,
 @PSearchText varchar(50),
 @PTotalRecord int  OUT
	)
As
Begin
Set nocount on;
	
    select 
		tbl.UserId,
		tbl.FirstName, 
        tbl.LastName, 
        tbl.Email,
        ut.UserTypeName,
		ut.UserTypeId,
        tbl.Active
	From applicationuser tbl 
		Left join applicationuserrole aur on  tbl.UserId = aur.UserId
		Left join applicationrole ar on aur.RoleId = ar.RoleId
		Left join employee em on tbl.UserId = em.EmployeeId
		Left join usertype ut on em.UserTypeId = ut.UserTypeId
        where ut.UserTypeId = @PUserTypeId
       AND ar.RoleId = (CASE WHEN @PRoleId  is not null AND @PRoleId > 0  THEN @PRoleId ELSE ar.RoleId END)
       AND tbl.Active = 1 
       AND 
         (
          FirstName LIKE Concat('%',@PSearchText,'%')
         )
       group by tbl.UserId,tbl.FirstName,tbl.LastName, tbl.Email,ut.UserTypeName,
		ut.UserTypeId,
        tbl.Active
	order by 
		case when @PSortColumn = 'UserId' and @PSortAscending = 1 then tbl.UserId end asc,
		case when @PSortColumn = 'UserId' and @PSortAscending = 0 then tbl.UserId end desc, 
		case when @PSortColumn = 'FirstName' and @PSortAscending = 1 then tbl.FirstName end asc,
		case when @PSortColumn = 'FirstName' and @PSortAscending = 0 then tbl.FirstName end desc,
        case when @PSortColumn = 'Email' and @PSortAscending = 1 then Email end asc,
		case when @PSortColumn = 'Email' and @PSortAscending = 0 then Email end desc,
        case when @PSortColumn = 'Active' and @PSortAscending = 1 then tbl.Active end asc,
		case when @PSortColumn = 'Active' and @PSortAscending = 0 then tbl.Active end desc,
        CASE  WHEN 1 = 1 THEN tbl.UserId end desc
	offset @POffset rows
	fetch next @PPageSize rows only;
	set @PTotalRecord =  (Select  COUNT(tbl.UserId) from applicationuser tbl 
		Left join applicationuserrole aur on  tbl.UserId = aur.UserId
		Left join applicationrole ar on aur.RoleId = ar.RoleId
		Left join employee em on tbl.UserId = em.EmployeeId
		Left join usertype ut on em.UserTypeId = ut.UserTypeId  where ut.UserTypeId = @PUserTypeId
       AND ar.RoleId = (CASE WHEN @PRoleId  is not null AND @PRoleId > 0  THEN @PRoleId ELSE ar.RoleId END)
       AND tbl.Active = 1 
       AND 
         (
          FirstName LIKE Concat('%',@PSearchText,'%')
         )
		 group by tbl.UserId,tbl.FirstName,tbl.LastName, tbl.Email,ut.UserTypeName,
		ut.UserTypeId,
        tbl.Active
		 ) ;
    

 select 
	    role.RoleName,
        role.RoleNameTranslation,
        role.RoleId,
        users.UserId
	from applicationuserrole tbl
    Left join applicationrole role on role.RoleId = tbl.RoleId
    Left join applicationuser users on users.UserId = tbl.UserId
    where  
    tbl.Active = 1;
        
End;
GO


